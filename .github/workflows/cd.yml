name: CD Deploy to GCP

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: ntalks-api
  REPO_NAME: ntalks-repo
  IMAGE_NAME: ntalks-api

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '22'
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm install
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest .
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest

  secrets:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Create or Update Secret
        run: |
          SECRET_NAME=ntalks-env
          ENV_CONTENT=$(cat .env | base64)
          if gcloud secrets describe $SECRET_NAME --project=${{ env.PROJECT_ID }} >/dev/null 2>&1; then
            echo "Updating secret..."
            echo $ENV_CONTENT | base64 --decode | gcloud secrets versions add $SECRET_NAME --data-file=-
          else
            echo "Creating secret..."
            echo $ENV_CONTENT | base64 --decode | gcloud secrets create $SECRET_NAME --data-file=- --replication-policy="automatic"
          fi

  migrate:
    needs: secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - uses: actions/setup-node@v3
        with:
          node-version: '22'
      - run: npm install
      - name: Start Cloud SQL Proxy
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > key.json
          wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
          chmod +x cloud_sql_proxy
          ./cloud_sql_proxy -instances=${{ secrets.CLOUD_SQL_CONNECTION_NAME }}=tcp:5432 -credential_file=key.json &
      - name: Run Prisma Migrations
        env:
          DATABASE_URL: "postgresql://user:password@127.0.0.1:5432/dbname?schema=public"
        run: |
          npx prisma migrate deploy
          npx prisma generate

  deploy:
    needs: migrate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --add-cloudsql-instances=${{ secrets.CLOUD_SQL_CONNECTION_NAME }} \
            --update-secrets .env=ntalks-env:latest
